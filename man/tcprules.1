.TH tcprules 1
.SH NAME
tcprules \- compiles rules for
.B tcpserver 
or
.BR sslserver .
.SH SYNOPSIS
.B tcprules
.I cdb
.I tmp
.SH DESCRIPTION
.B tcpserver 
and
.B sslserver
optionally follow rules to decide whether a TCP connection is acceptable. 
A 'rule' typially consists of the tokens 'address', 'instruction', and 'expression' 
telling for which 'address' a 'instruction' is provided following a set of 
expressions, providing some environment variables. The 'address' token 
can be given as IPv4/IPv6 address in CIDR format, or 
- if prepended with a equal sign (=) - a hostname/FQDN, to be subject of 
DNS qualification.
Additionally, environment variables can be provided and are promoted for 
a particular connection.  Environment variables may include ':' (colons).

Intructions are
.I allow
and 
.IR deny.
.SH "IPv4 ADDRESSES BASED RULES"
For example, the rule 
.IP
18.23.0.32:deny
.P
prohibits connections from IP address 18.23.0.32.
Ranges of IPv4 addresses can defined in a \fIclass-dependend\fR manner
.IP
18.:deny
.P 
or by means of a range of contiguous addresses
.IP
18.23.0.1-22:ins
.P
Rather a CIDR notation can be used instead. The rule
.IP
127./8:allow
.P
accepts any connections from the loopback net. The number of digits
given shall approximately match the length of the subnet bits and
should not be less. 

The bit-lenth of the given IP address has
at least to match number of net-prefix bits. 
Otherwise, a syntax error is displayed.

\fINote\fR: Always IP addresses with the longest matching prefix
are considered.
.SH "IPv6 ADDRESSES BASED RULES"
.B tcprules
understands \fIcompactified\fR IPv6 addresses in standard
CIDR notation.
The rule
.IP
2001:de01:2:3:4:a:b:c:deny 
.P
rejects any IPv6 packet from a single host while 
.IP
2002::/48:deny
.P
can be used to block an entire IPv6 (sub-)net
in case the net-prefix (here: \fI/48\fR) is provided.

\fINote\fR: Since the IPv6 address on input is evaluated
in it's compactified format, simply include the final '::'
for convenience. The resulting address is truncated 
to the number of provided prefix bits. 
.SH "IPv6 MAPPED IPv4 ADDRESSES"
.B tcprules
does currently not understand IPv6 mapped IPv4 addresses
.IP
::ffff:a.b.c.d
.P
where 
.IP
a.b.c.d
.P 
is the mapped IPv4 addresses.
.SH USAGE
.B tcprules
reads rules from it's standard input and writes them into
.I cdb
in a binary format suited for quick access by
.BR tcpserver .
Typically
.IP
\fBtcprules\fR rules.cdb rules.tmp < rules.txt
.P

.B tcprules
can be used while
.B tcpserver 
or
.B sslserver
is running. It ensures that
.I cdb
is updated atomically. It does this by first writing the rules to
.I tmp
and then moving
.I tmp
on top of
.IR cdb .
If
.I tmp
already exists, it is destroyed. The directories containing
.I cdb
and
.I tmp
must be writable to
.BR tcprules ;
they must also be on the same filesystem. 

If there is a problem with the input or with
.IR tmp ,
.B tcprules
complains and leaves
.I cdb
alone. 

The binary
.I cdb
format is portable across machines.
.SH RULE FORMAT
A rule is one line. A file containing rules may also contain comments: lines
beginning with # are ignored. 

Each rule contains an address, a question mark, an instruction, and optionally 
a list of expressions, with no extra spaces. When
.BR tcpserver 
receives a connection from that address, it follows the instruction and evaluates the expressions.
.SH "ADDRESS TOKENS"
.BR tcpserver
looks for rules with various addresses: 
.IP 1.
$TCPREMOTEINFO@$TCPREMOTEIP, if $TCPREMOTEINFO is set; 
.IP 2.
$TCPREMOTEINFO@=$TCPREMOTEHOST, if $TCPREMOTEINFO is set and $TCPREMOTEHOST is
set;
.IP 3.
$TCPREMOTEIP; 
.IP 4.
=$TCPREMOTEHOST, if $TCPREMOTEHOST is set; 
.IP 5.
shorter and shorter prefixes of $TCPREMOTEIP ending with a dot; 
.IP 6.
$TCPREMOTEIP/PREFIX
considering in order the longest matching provided PREFIX;
.IP 7.
shorter and shorter suffixes of $TCPREMOTEHOST starting with a dot, preceded
by =, if $TCPREMOTEHOST is set; 
.IP 8.
=, if $TCPREMOTEHOST is set; and finally 
.IP 9.
the empty string. 
.P
.B tcpserver 
uses the first rule it finds. You should use the
.B -p
option to
.B tcpserver
or
.B sslserver
if you rely on $TCPREMOTEHOST here. 

For example, here are some rules: 

     joe@127.0.0.1:first
     18.23.0.32:second
     :third
     127.:fourth

If $TCPREMOTEIP is 10.119.75.38,
.B tcpserver 
will follow the third instruction. 

If $TCPREMOTEIP is 18.23.0.32,
.B tcpserver
will follow the second instructions. 

If $TCPREMOTEIP is 127.0.0.1 and $TCPREMOTEINFO is bill,
.B tcpserver 
will follow the fourth instructions. 

If $TCPREMOTEIP is 127.0.0.1 and $TCPREMOTEINFO is joe,
.B tcpserver 
will follow the first instructions. 

You can use
.B tcprulescheck
to see how 
.B tcpserver 
will interpret rules in
.IR cdb .
.SH INSTRUCTIONS
The instructions in a rule must begin with either 
.I allow 
or
.IR deny . 
.I deny 
tells
.B tcpserver 
to drop the connection without running anything. For example, the rule
.IP
:deny
.P
tells
.B tcpserver 
to drop all connections that aren't handled by more specific rules. 

The instructions may continue with further expressions used as environment variables, in the form
.IR var="x" .
.B tcpserver
and
.B sslserver
adds an environment variable 
.I $var 
with value
.IR x . 
For example,
.IP
10.0.:allow,RELAYCLIENT="@fix.me"
.P
adds an environment variable $RELAYCLIENT with value @fix.me. The quotes may
be replaced by any repeated character:
.IP
10.0.:allow,RELAYCLIENT=/@fix.me/
.P
Any number of variables may be listed:
.IP
127.0.0.1:allow,RELAYCLIENT="",TCPLOCALHOST="movie.edu"
.IP
.SH "SEE ALSO"
tcpserver(1),
tcprulescheck(1),
argv0(1),
fixcrio(1),
recordio(1),
rblsmtpd(1),
tcpclient(1),
who@(1),
date@(1),
finger@(1),
http@(1),
tcpcat(1),
mconnect(1),
tcp-environ(5)
